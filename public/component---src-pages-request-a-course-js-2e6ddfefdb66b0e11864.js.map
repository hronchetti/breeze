{"version":3,"sources":["webpack:///./src/components/HowItWorks/index.js","webpack:///./src/components/RequestACourseForm/index.js","webpack:///./src/pages/request-a-course.js"],"names":["HowItWorks","steps","className","id","align","length","map","step","index","key","fluid","icon","childImageSharp","alt","icon_description","title","step_heading","step_description","RequestACourse","courses","useState","coursesForSelect","setCourses","message","visible","type","toast","setToast","useEffect","formatCourses","formattedCourses","forEach","course","push","value","node","name","label","handleSubmit","values","a","setSubmitting","resetForm","options","method","headers","data","qs","stringify","url","axios","initialValues","fullname","email","location","validationSchema","Yup","shape","required","onSubmit","isSubmitting","netlify-honeypot","data-netlify","placeholder","rows","optional","disabled","to","smooth","offset","duration","onClick","pageQuery","requestCourse","strapiRequestACourse","requestCourseSEO","seo","defaultSEO","href","allCourses","allStrapiCourses","edges","Layout","SEO","description","canonicalHref","canonical_href","ogImage","image","absolutePath","ogType","og_type","ogUrl","og_url","imageDescription","image_description","paragraph","RequestACourseForm","how_it_works","SignOffStillLooking"],"mappings":"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","file":"component---src-pages-request-a-course-js-2e6ddfefdb66b0e11864.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Img from \"gatsby-image\"\n\nimport Divider from \"../Divider\"\n\nconst HowItWorks = ({ steps }) => {\n  return (\n    <section className=\"wrapper padded\" id=\"howItWorks\">\n      <h2 className=\"textCenterAlways\">How it works</h2>\n      <Divider align=\"centerAlways\" />\n      {steps && steps.length > 0 ? (\n        <div className=\"howItWorks\">\n          {steps.map((step, index) => (\n            <div key={step.id} className=\"step\">\n              <section className=\"illustration\">\n                <span className=\"stepNumber\">\n                  <span className=\"number\">{index + 1}</span>\n                </span>\n                <Img\n                  className=\"image\"\n                  fluid={step.icon.childImageSharp.fluid}\n                  alt={step.icon_description}\n                  title={step.icon_description}\n                />\n              </section>\n              <h4>{step.step_heading}</h4>\n              <p>{step.step_description}</p>\n            </div>\n          ))}\n        </div>\n      ) : (\n        \"\"\n      )}\n    </section>\n  )\n}\n\nHowItWorks.propTypes = {\n  steps: PropTypes.array.isRequired,\n}\n\nexport default HowItWorks\n","import React, { useEffect, useState } from \"react\"\nimport * as Yup from \"yup\"\nimport { Formik, Form, Field } from \"formik\"\nimport axios from \"axios\"\nimport qs from \"qs\"\nimport PropTypes from \"prop-types\"\nimport { Link } from \"react-scroll\"\n\nimport { Input, TextArea, Select, Toast } from \"../Form\"\n\nconst RequestACourse = ({ courses }) => {\n  const [coursesForSelect, setCourses] = useState([])\n  const [toast, setToast] = useState({\n    message: \"\",\n    visible: false,\n    type: true,\n  })\n\n  useEffect(() => {\n    formatCourses(courses)\n  }, [courses])\n\n  const formatCourses = courses => {\n    let formattedCourses = []\n\n    courses.forEach(course => {\n      formattedCourses.push({\n        value: course.node.name,\n        label: course.node.name,\n      })\n    })\n    setCourses([\n      ...formattedCourses,\n      {\n        value: \"Acupuncture General Update\",\n        label: \"Acupuncture General Update\",\n      },\n      { value: \"Acupuncture in Sport\", label: \"Acupuncture in Sport\" },\n      {\n        value: \"Acupuncture in Women's Health\",\n        label: \"Acupuncture in Women's Health\",\n      },\n      { value: \"Cupping\", label: \"Cupping\" },\n      { value: \"Dry Needling\", label: \"Dry Needling\" },\n      {\n        value: \"Surface anatomy palpation\",\n        label: \"Surface anatomy palpation\",\n      },\n      { value: \"Taping & Strapping\", label: \"Taping & Strapping\" },\n      {\n        value: \"Trigger Point Acupuncture\",\n        label: \"Trigger Point Acupuncture\",\n      },\n      { value: \"Understanding Research\", label: \"Understanding Research\" },\n      { value: \"Tailor your own\", label: \"Tailor your own\" },\n    ])\n  }\n\n  const handleSubmit = async (values, { setSubmitting, resetForm }) => {\n    const options = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      data: qs.stringify(values),\n      url: \"/\",\n    }\n    try {\n      await axios(options)\n      // Success\n      setToast({\n        type: true,\n        visible: true,\n        message: \"Message sent, we'll be in contact soon!\",\n      })\n      resetForm({})\n    } catch (e) {\n      // Failed\n      setToast({\n        type: false,\n        visible: true,\n        message: \"Could not send message, please try again\",\n      })\n    }\n    setSubmitting(false)\n  }\n  return (\n    <>\n      <Formik\n        initialValues={{\n          fullname: \"\",\n          email: \"\",\n          course: \"\",\n          location: \"\",\n          message: \"\",\n          \"bot-field\": \"\",\n          \"form-name\": \"Request a course\",\n        }}\n        validationSchema={Yup.object().shape({\n          fullname: Yup.string().required(\"Required\"),\n          email: Yup.string()\n            .email(\"Must be a valid email address\")\n            .required(\"Required\"),\n          course: Yup.string().required(\"Required\"),\n          location: Yup.string().required(\"Required\"),\n          message: Yup.string(),\n        })}\n        onSubmit={handleSubmit}\n      >\n        {({ isSubmitting }) => (\n          <Form\n            className=\"requestACourse\"\n            name=\"Request a course\"\n            method=\"post\"\n            netlify-honeypot=\"bot-field\"\n            data-netlify=\"true\"\n          >\n            <Field type=\"hidden\" name=\"bot-field\" />\n            <Field type=\"hidden\" name=\"form-name\" />\n            <Input\n              label=\"Your name\"\n              name=\"fullname\"\n              type=\"text\"\n              placeholder=\"Who are we speaking to?\"\n            />\n            <Input\n              label=\"Email\"\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"How we'll contact you\"\n            />\n            <Select label=\"Course\" name=\"course\" options={coursesForSelect} />\n            <Input\n              label=\"Location\"\n              name=\"location\"\n              type=\"text\"\n              placeholder=\"Where should the course be held?\"\n            />\n            <TextArea\n              label=\"Message\"\n              name=\"message\"\n              rows={4}\n              optional=\"true\"\n              placeholder=\"Any extra information that might help us organise the course\"\n            />\n            <section className=\"headerButtons\">\n              <button\n                disabled={isSubmitting}\n                className=\"button buttonPrimary\"\n                type=\"submit\"\n              >\n                Request course\n              </button>\n              <Link\n                to=\"howItWorks\"\n                className=\"button buttonSecondary\"\n                smooth={true}\n                offset={-96}\n                duration={500}\n              >\n                How it works\n              </Link>\n            </section>\n          </Form>\n        )}\n      </Formik>\n      <Toast\n        message={toast.message}\n        type={toast.type}\n        visible={toast.visible}\n        onClick={() =>\n          setToast(toast => ({\n            ...toast,\n            visible: false,\n          }))\n        }\n      />\n    </>\n  )\n}\n\nRequestACourse.propTypes = {\n  courses: PropTypes.array.isRequired,\n}\n\nexport default RequestACourse\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { graphql } from \"gatsby\"\n\nimport { HeaderBlob } from \"../components/Layout/Headers\"\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/SEO\"\nimport SignOffStillLooking from \"../components/SignOffStillLooking\"\nimport HowItWorks from \"../components/HowItWorks\"\nimport RequestACourseForm from \"../components/RequestACourseForm\"\nimport { defaultSEO } from \"../utilities\"\n\nconst RequestACourse = ({ data, location }) => {\n  const requestCourse = data.strapiRequestACourse\n  const requestCourseSEO = requestCourse.seo\n    ? requestCourse.seo\n    : defaultSEO(requestCourse.title, \"\", location.href)\n  const allCourses = data.allStrapiCourses.edges\n\n  return (\n    <Layout>\n      <SEO\n        title={requestCourseSEO.title}\n        description={requestCourseSEO.description}\n        canonicalHref={requestCourseSEO.canonical_href}\n        ogImage={requestCourseSEO.image.absolutePath}\n        ogType={requestCourseSEO.og_type}\n        ogUrl={requestCourseSEO.og_url}\n      />\n      <HeaderBlob\n        title={requestCourse.title}\n        image={requestCourse.image.childImageSharp.fluid}\n        imageDescription={requestCourse.image_description}\n        align=\"top\"\n      >\n        <p>{requestCourse.paragraph}</p>\n        <RequestACourseForm courses={allCourses} />\n      </HeaderBlob>\n      <main className=\"backgroundGreyLightSuper\">\n        <HowItWorks steps={requestCourse.how_it_works} />\n      </main>\n      <SignOffStillLooking />\n    </Layout>\n  )\n}\n\nRequestACourse.propTypes = {\n  data: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired,\n}\n\nexport default RequestACourse\n\nexport const pageQuery = graphql`\n  query getRequestCourseContent {\n    strapiRequestACourse {\n      id\n      title\n      paragraph\n      image {\n        childImageSharp {\n          fluid(maxWidth: 1600) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      image_description\n      how_it_works {\n        step_description\n        step_heading\n        id\n        icon {\n          childImageSharp {\n            fluid(maxWidth: 1600) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        icon_description\n      }\n      seo {\n        canonical_href\n        description\n        id\n        og_type\n        og_url\n        title\n        image {\n          absolutePath\n        }\n      }\n    }\n    allStrapiCourses {\n      edges {\n        node {\n          name\n          id\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}