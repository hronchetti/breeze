{"version":3,"sources":["webpack:///./src/templates/course-list.js","webpack:///./src/components/FilterOption/index.js"],"names":["CourseList","data","location","useState","sidebarVisibileMobile","setSidebarVisibilityMobile","modalVisible","setModalVisibility","stripeProduct","setStripeProduct","bookingId","setBookingId","allCourseBookings","allStrapiCourseBookings","edges","courses","allStrapiCourses","courseTopic","strapiCourseTopics","courseTopicSEO","seo","defaultSEO","name","description","href","toggleSidebarVisibilityMobile","prepareModal","title","canonicalHref","canonical_href","ogImage","image","absolutePath","ogType","og_type","ogUrl","og_url","childImageSharp","fluid","imageDescription","image_description","className","length","map","course","key","node","id","value","closeMobileWrapper","setTimeout","scroll","onClick","bookings","filter","booking","strapiId","closeFn","clearAllBodyScrollLocks","pageQuery","FilterOption","clickFunc","filteredValue","mobileOnly","activeClass","to","spy","smooth","offset","duration","onSetInactive","defaultProps"],"mappings":"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","file":"component---src-templates-course-list-js-fbba4fe288a3e5722b6e.js","sourcesContent":["import React, { useState } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { graphql } from \"gatsby\"\nimport { clearAllBodyScrollLocks } from \"body-scroll-lock\"\n\nimport { CourseListing, EmptyCourseList } from \"../components/Courses\"\nimport FilterOption from \"../components/FilterOption\"\nimport { HeaderBlob } from \"../components/Layout/Headers\"\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/SEO\"\nimport SignOffStillLooking from \"../components/SignOffStillLooking\"\nimport { HealthcareProfessionalsOnly } from \"../components/Modal\"\nimport { defaultSEO } from \"../utilities\"\n\nconst CourseList = ({ data, location }) => {\n  const [sidebarVisibileMobile, setSidebarVisibilityMobile] = useState(false)\n  const [modalVisible, setModalVisibility] = useState(false)\n  const [stripeProduct, setStripeProduct] = useState(\"\")\n  const [bookingId, setBookingId] = useState()\n\n  const allCourseBookings = data.allStrapiCourseBookings.edges\n  const courses = data.allStrapiCourses.edges\n  const courseTopic = data.strapiCourseTopics\n  const courseTopicSEO = courseTopic.seo\n    ? courseTopic.seo\n    : defaultSEO(courseTopic.name, courseTopic.description, location.href)\n\n  const toggleSidebarVisibilityMobile = () => {\n    setSidebarVisibilityMobile(!sidebarVisibileMobile)\n  }\n\n  const prepareModal = (stripeProduct, bookingId) => {\n    setModalVisibility(true)\n    setStripeProduct(stripeProduct)\n    setBookingId(bookingId)\n  }\n\n  return (\n    <Layout>\n      <SEO\n        title={courseTopicSEO.title}\n        description={courseTopicSEO.description}\n        canonicalHref={courseTopicSEO.canonical_href}\n        ogImage={courseTopicSEO.image.absolutePath}\n        ogType={courseTopicSEO.og_type}\n        ogUrl={courseTopicSEO.og_url}\n      />\n      <HeaderBlob\n        title={`${courseTopic.name} courses`}\n        image={courseTopic.image ? courseTopic.image.childImageSharp.fluid : \"\"}\n        imageDescription={\n          courseTopic.image_description ? courseTopic.image_description : \"\"\n        }\n      >\n        <p>{courseTopic.description}</p>\n      </HeaderBlob>\n      <main className=\"backgroundGreyLightSuper\">\n        {courses && courses.length > 0 ? (\n          <section className=\"wrapper wrapperSidebarLayout\">\n            <aside\n              className={`wrapperSidebar${\n                sidebarVisibileMobile ? \" open\" : \"\"\n              }`}\n            >\n              <div className=\"sidebar\">\n                <span className=\"sidebarHeading\">Quick access</span>\n                <section className=\"sidebarItems\">\n                  {courses.map(course => (\n                    <FilterOption\n                      key={course.node.id}\n                      value={course.node.name}\n                      closeMobileWrapper={() =>\n                        setTimeout(toggleSidebarVisibilityMobile, 500)\n                      }\n                      scroll\n                    />\n                  ))}\n                </section>\n              </div>\n              <button\n                className=\"sidebarControl\"\n                onClick={toggleSidebarVisibilityMobile}\n              >\n                <span className=\"accessibleText\">Show/hide filters</span>\n              </button>\n              <span className=\"fill\"></span>\n            </aside>\n            <section className=\"filteredContent\">\n              <span className=\"filterCount\">\n                {courses.length > 1 || courses.length === 0\n                  ? `${courses.length} courses`\n                  : `${courses.length} course`}\n              </span>\n              {courses.map(course => (\n                <CourseListing\n                  key={course.node.id}\n                  course={course.node}\n                  bookings={allCourseBookings.filter(\n                    booking => booking.node.course.id === course.node.strapiId\n                  )}\n                  prepareModal={prepareModal}\n                />\n              ))}\n            </section>\n          </section>\n        ) : (\n          <section className=\"wrapper padded\">\n            <EmptyCourseList courseTopic={courseTopic.name} />\n          </section>\n        )}\n      </main>\n      <SignOffStillLooking />\n      {modalVisible ? (\n        <HealthcareProfessionalsOnly\n          closeFn={() => setModalVisibility(false)}\n          stripeProduct={stripeProduct}\n          bookingId={bookingId}\n          location={location}\n        />\n      ) : (\n        clearAllBodyScrollLocks()\n      )}\n    </Layout>\n  )\n}\n\nCourseList.propTypes = {\n  data: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired,\n}\n\nexport default CourseList\n\nexport const pageQuery = graphql`\n  query AllCoursesInTopic($name: String!, $topicId: Int) {\n    allStrapiCourses(\n      sort: { fields: name, order: ASC }\n      filter: { course_topic: { name: { eq: $name } } }\n    ) {\n      edges {\n        node {\n          id\n          strapiId\n          name\n          skill_level\n          summary\n          teaching_time\n          online_only\n          thinkific_training {\n            course_link\n            course_duration\n            course_name\n            id\n          }\n          course_topic {\n            name\n          }\n        }\n      }\n    }\n    allStrapiCourseBookings(\n      filter: { course: { course_topic: { eq: $topicId } } }\n      sort: { fields: start_date, order: ASC }\n    ) {\n      edges {\n        node {\n          id\n          strapiId\n          address_full\n          start_date\n          booking_price\n          stripe_product\n          discount_percentage\n          teaching_period {\n            end\n            start\n            id\n          }\n          course {\n            id\n          }\n        }\n      }\n    }\n    strapiCourseTopics(name: { eq: $name }) {\n      name\n      description\n      image {\n        childImageSharp {\n          fluid(maxWidth: 2000) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      image_description\n      seo {\n        canonical_href\n        description\n        id\n        og_type\n        og_url\n        title\n        image {\n          absolutePath\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link } from \"react-scroll\"\n\nconst FilterOption = ({\n  clickFunc,\n  filteredValue,\n  mobileOnly,\n  value,\n  scroll,\n  closeMobileWrapper,\n}) => {\n  if (scroll) {\n    return (\n      <Link\n        activeClass=\"applied\"\n        to={value}\n        spy={true}\n        className={`filterOption${mobileOnly ? \" mobileOnly\" : \"\"}`}\n        smooth={true}\n        offset={-112}\n        duration={500}\n        onSetInactive={closeMobileWrapper}\n      >\n        <span className=\"selector\"></span>\n        <span className=\"text\">{value}</span>\n      </Link>\n    )\n  } else {\n    return (\n      <button\n        className={`filterOption${filteredValue === value ? \" applied\" : \"\"}${\n          mobileOnly ? \" mobileOnly\" : \"\"\n        }`}\n        onClick={() => clickFunc(value)}\n      >\n        <span className=\"selector\"></span>\n        <span className=\"text\">{value}</span>\n      </button>\n    )\n  }\n}\n\nFilterOption.defaultProps = {\n  mobileOnly: false,\n  scroll: false,\n  filteredValue: \"\",\n  clickFunc: () => {},\n  closeMobileWrapper: () => {},\n}\n\nFilterOption.propTypes = {\n  clickFunc: PropTypes.func,\n  filteredValue: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  mobileOnly: PropTypes.bool,\n  scroll: PropTypes.bool,\n  closeMobileWrapper: PropTypes.func,\n}\n\nexport default FilterOption\n"],"sourceRoot":""}