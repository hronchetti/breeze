{"version":3,"sources":["webpack:///./src/components/BlogArticlePreview/index.js","webpack:///./src/components/FilterOption/index.js","webpack:///./src/pages/blog.js"],"names":["BlogArticleList","article","className","to","blogArticleSlug","title","fluid","cover","childImageSharp","alt","cover_image_description","excerpt","FilterOption","clickFunc","filteredValue","mobileOnly","value","scroll","closeMobileWrapper","activeClass","spy","smooth","offset","duration","onSetInactive","onClick","defaultProps","Blog","data","location","useState","articles","setArticles","articleTopicFiltered","setArticleTopicFiltered","sidebarVisibileMobile","setSidebarVisibilityMobile","blogSEO","strapiBlogPage","seo","defaultSEO","href","useEffect","allStrapiBlogArticles","edges","allStrapiBlogArticleTopics","toggleFilteredTopic","clickedTopicName","map","node","blog_article_topic","name","oldArticles","setTimeout","description","canonicalHref","canonical_href","ogImage","image","absolutePath","ogType","og_type","ogUrl","og_url","topic","key","id","length","pageQuery"],"mappings":"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","file":"component---src-pages-blog-js-237cee2f903ed6cd3629.js","sourcesContent":["import React from \"react\"\nimport Img from \"gatsby-image\"\nimport PropTypes from \"prop-types\"\nimport { Link } from \"gatsby\"\nimport { blogArticleSlug } from \"../../utilities/createSlug\"\n\nconst BlogArticleList = ({ article }) => {\n  return (\n    <Link className=\"blogArticleList\" to={blogArticleSlug(article.title)}>\n      <Img\n        className=\"cover\"\n        fluid={article.cover.childImageSharp.fluid}\n        alt={article.cover_image_description}\n        title={article.cover_image_description}\n      />\n      <div className=\"content\">\n        <h3>{article.title}</h3>\n        <p>{article.excerpt}</p>\n        <span className=\"linkArrow\">Read article</span>\n      </div>\n    </Link>\n  )\n}\n\nBlogArticleList.propTypes = {\n  article: PropTypes.object.isRequired,\n}\n\nexport default BlogArticleList\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link } from \"react-scroll\"\n\nconst FilterOption = ({\n  clickFunc,\n  filteredValue,\n  mobileOnly,\n  value,\n  scroll,\n  closeMobileWrapper,\n}) => {\n  if (scroll) {\n    return (\n      <Link\n        activeClass=\"applied\"\n        to={value}\n        spy={true}\n        className={`filterOption${mobileOnly ? \" mobileOnly\" : \"\"}`}\n        smooth={true}\n        offset={-112}\n        duration={500}\n        onSetInactive={closeMobileWrapper}\n      >\n        <span className=\"selector\"></span>\n        <span className=\"text\">{value}</span>\n      </Link>\n    )\n  } else {\n    return (\n      <button\n        className={`filterOption${filteredValue === value ? \" applied\" : \"\"}${\n          mobileOnly ? \" mobileOnly\" : \"\"\n        }`}\n        onClick={() => clickFunc(value)}\n      >\n        <span className=\"selector\"></span>\n        <span className=\"text\">{value}</span>\n      </button>\n    )\n  }\n}\n\nFilterOption.defaultProps = {\n  mobileOnly: false,\n  scroll: false,\n  filteredValue: \"\",\n  clickFunc: () => {},\n  closeMobileWrapper: () => {},\n}\n\nFilterOption.propTypes = {\n  clickFunc: PropTypes.func,\n  filteredValue: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  mobileOnly: PropTypes.bool,\n  scroll: PropTypes.bool,\n  closeMobileWrapper: PropTypes.func,\n}\n\nexport default FilterOption\n","import React, { useState, useEffect } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { graphql } from \"gatsby\"\n\nimport BlogArticlePreview from \"../components/BlogArticlePreview\"\nimport FilterOption from \"../components/FilterOption\"\nimport { Header } from \"../components/Layout/Headers\"\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/SEO\"\nimport SignOffMailingList from \"../components/SignOffMailingList\"\nimport { defaultSEO } from \"../utilities\"\n\nconst Blog = ({ data, location }) => {\n  const [articles, setArticles] = useState([])\n  const [articleTopicFiltered, setArticleTopicFiltered] = useState(\"All topics\")\n  const [sidebarVisibileMobile, setSidebarVisibilityMobile] = useState(false)\n  const blogSEO = data.strapiBlogPage.seo\n    ? data.strapiBlogPage.seo\n    : defaultSEO(\"Blog\", \"Our articles\", location.href)\n\n  useEffect(() => {\n    setArticles(data.allStrapiBlogArticles.edges)\n  }, [data.allStrapiBlogArticleTopics.edges, data.allStrapiBlogArticles.edges])\n\n  const toggleFilteredTopic = clickedTopicName => {\n    if (\n      articleTopicFiltered === clickedTopicName ||\n      clickedTopicName === \"All topics\"\n    ) {\n      setArticleTopicFiltered(\"All topics\")\n      setArticles(data.allStrapiBlogArticles.edges)\n    } else {\n      setArticleTopicFiltered(clickedTopicName)\n      setArticles([])\n      data.allStrapiBlogArticles.edges.map(article =>\n        article.node.blog_article_topic.name === clickedTopicName\n          ? setArticles(oldArticles => [...oldArticles, article])\n          : null\n      )\n    }\n\n    setTimeout(() => {\n      setSidebarVisibilityMobile(false)\n    }, 250)\n  }\n\n  const toggleSidebarVisibilityMobile = () => {\n    setSidebarVisibilityMobile(!sidebarVisibileMobile)\n  }\n  return (\n    <Layout>\n      <SEO\n        title={blogSEO.title}\n        description={blogSEO.description}\n        canonicalHref={blogSEO.canonical_href}\n        ogImage={blogSEO.image.absolutePath}\n        ogType={blogSEO.og_type}\n        ogUrl={blogSEO.og_url}\n      />\n      <Header title=\"Blog\" />\n      <main className=\"backgroundGreyLightSuper\">\n        <section className=\"wrapper wrapperSidebarLayout\">\n          <aside\n            className={`wrapperSidebar${sidebarVisibileMobile ? \" open\" : \"\"}`}\n          >\n            <div className=\"sidebar\">\n              <span className=\"sidebarHeading\">Filter by topic</span>\n              <FilterOption\n                value=\"All topics\"\n                clickFunc={toggleFilteredTopic}\n                filteredValue={articleTopicFiltered}\n                mobileOnly={true}\n              />\n              {data.allStrapiBlogArticleTopics.edges.map(topic => (\n                <FilterOption\n                  key={topic.node.id}\n                  value={topic.node.name}\n                  clickFunc={toggleFilteredTopic}\n                  filteredValue={articleTopicFiltered}\n                />\n              ))}\n            </div>\n            <button\n              className=\"sidebarControl\"\n              onClick={toggleSidebarVisibilityMobile}\n            >\n              <span className=\"accessibleText\">Show/hide filters</span>\n            </button>\n            <span className=\"fill\"></span>\n          </aside>\n          <section className=\"filteredContent\">\n            <span className=\"filterCount\">\n              {articles.length > 1 || articles.length === 0\n                ? `${articles.length} articles`\n                : `${articles.length} article`}\n              {articleTopicFiltered !== \"All topics\"\n                ? ` in '${articleTopicFiltered}'`\n                : \"\"}\n            </span>\n            {articles.map(article => (\n              <BlogArticlePreview\n                article={article.node}\n                key={article.node.id}\n              />\n            ))}\n          </section>\n        </section>\n      </main>\n      <SignOffMailingList />\n    </Layout>\n  )\n}\n\nBlog.propTypes = {\n  data: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired,\n}\n\nexport default Blog\n\nexport const pageQuery = graphql`\n  query allBlogArticles {\n    allStrapiBlogArticles(sort: { order: DESC, fields: created_at }) {\n      edges {\n        node {\n          id\n          blog_article_topic {\n            id\n            name\n          }\n          cover {\n            childImageSharp {\n              fluid(maxWidth: 960) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n          cover_image_description\n          created_at\n          excerpt\n          section {\n            content\n            id\n          }\n          title\n        }\n      }\n    }\n    allStrapiBlogArticleTopics(sort: { order: ASC, fields: name }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    strapiBlogPage {\n      seo {\n        canonical_href\n        description\n        og_type\n        og_url\n        title\n        image {\n          absolutePath\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}